pipeline {
    agent any

    triggers {
        pollSCM('H/2 * * * *')
    }

    environment {
        DOCKER_CREDENTIALS_ID = 'dockerhub-credentials'
        SONARQUBE_SERVER = 'sonarqube-server'
        DATADOG_API_KEY = 'datadog-api-key'
    }

    stages {
        stage('Checkout') {
            steps {
                git(
                    url: 'https://github.com/adrianweerasinghe97/SIT753_Task_6.2.git',
                    branch: 'main',
                    credentialsId: 'dd8d9b6f-59c4-44fd-b55d-e5a7dd5eea62' // Your Git credentials ID
                )
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image and tag it as 'myapp:latest'
                    docker.build('myapp:latest')
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    // Push the Docker image to the registry
                    docker.withRegistry('https://index.docker.io/v1/', DOCKER_CREDENTIALS_ID) {
                        docker.image('myapp:latest').push('latest')
                    }
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    // Run npm tests
                    sh 'npm install'
                    sh 'npm test'
                }
                junit '**/test-results.xml'
            }
        }

        stage('Code Quality Analysis') {
            steps {
                script {
                    withSonarQubeEnv('SonarQube') {
                        sh 'sonar-scanner'
                    }
                }
            }
        }

        stage('Deploy to Test Environment') {
            steps {
                script {
                    // Deploy the Docker container to the test environment using Docker Compose
                    sh 'docker-compose -f docker-compose.test.yml up -d'
                }
            }
        }

        stage('Release to Production') {
            steps {
                script {
                    // Promote the application to the production environment
                    // Assuming you have a specific release strategy, e.g., with Octopus Deploy
                    octopusDeployRelease additionalArgs: '--deployTo=Production',
                        releaseVersion: '1.0.0',
                        spaceId: 'Spaces-1',
                        project: 'SIT753_Task_6.2'
                }
            }
        }

        stage('Monitoring and Alerting') {
            steps {
                script {
                    // Configure Datadog monitoring and alerting
                    datadog(apiKey: env.DATADOG_API_KEY, appKey: env.DATADOG_APP_KEY) {
                        sh 'datadog-agent status'
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}


//code updated
