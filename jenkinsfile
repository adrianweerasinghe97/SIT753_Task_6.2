pipeline {
    agent any

    triggers {
        pollSCM('H/2 * * * *')
    }

    environment {
        DOCKER_CREDENTIALS_ID = 'docker-credentials' // Docker credentials ID
        DOCKER_IMAGE = 'adriandock1830/sit753_task_6.2'
        GIT_REPO = 'https://github.com/adrianweerasinghe97/SIT753_Task_6.2.git'
        GIT_CREDENTIALS_ID = 'dd8d9b6f-59c4-44fd-b55d-e5a7dd5eea62' // Git credentials ID
        NODEJS_HOME = 'E:\\Softwares\\Nodejs' // Path to the local Node.js installation
        DOCKER_COMPOSE_TEST_YML = '''
        version: '3'
        services:
          web:
            image: adriandock1830/sit753_task_6.2:latest
            ports:
              - "3000:3000"
            environment:
              - NODE_ENV=test
        ''' // Content of docker-compose.test.yml
    }

    stages {
        stage('Checkout') {
            steps {
                git(
                    url: "${env.GIT_REPO}",
                    branch: 'main',
                    credentialsId: "${env.GIT_CREDENTIALS_ID}"
                )
            }
        }

        stage('Install Dependencies') {
            environment {
                PATH = "${env.NODEJS_HOME};${env.PATH}" // Add Node.js to the PATH
            }
            steps {
                script {
                    // Install npm dependencies
                    bat 'npm install'
                }
            }
        }

        stage('Run ESLint') {
            environment {
                PATH = "${env.NODEJS_HOME};${env.PATH}" // Add Node.js to the PATH
            }
            steps {
                script {
                    // Run ESLint for code quality analysis and fix fixable issues
                    bat 'npx eslint . --fix'
                }
            }
        }

        stage('Run Jest Tests') {
            steps {
                script {
                    // Run Jest tests and capture the output
                    def testOutput = bat(script: 'npx jest --ci --reporters=jest-junit', returnStdout: true)
                    currentBuild.description = testOutput
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image and tag it
                    docker.build("${DOCKER_IMAGE}:latest") // Use your Docker Hub username and repository
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    // Push the Docker image to the registry
                    docker.withRegistry('https://index.docker.io/v1/', DOCKER_CREDENTIALS_ID) {
                        docker.image("${DOCKER_IMAGE}:latest").push('latest') // Use your Docker Hub username and repository
                    }
                }
            }
        }

        stage('Deploy to Test Environment') {
            steps {
                script {
                    // Deploy the Docker container to the test environment using Docker Compose
                    def composeFile = bat(script: "echo ${DOCKER_COMPOSE_TEST_YML} | docker-compose -f - up -d", returnStdout: true)
                    currentBuild.description += "\n\nDocker Compose Deployment Output:\n${composeFile}"
                }
            }
        }

        stage('Release to Production') {
            steps {
                script {
                    // Placeholder for release to production steps
                    echo 'Release to production environment'
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            script {
                emailext (
                    to: 'adrian1997.thilina@gmail.com',
                    subject: "Jenkins Build Success - ${currentBuild.fullDisplayName}",
                    body: """
                        Build succeeded. 

                        Please find the test report below:
                        ${currentBuild.description}

                        Docker Compose Test YML:
                        ${env.DOCKER_COMPOSE_TEST_YML}
                    """,
                    attachLog: true
                )
            }
        }
        failure {
            script {
                emailext (
                    to: 'adrian1997.thilina@gmail.com',
                    subject: "Jenkins Build Failed - ${currentBuild.fullDisplayName}",
                    body: """
                        Build failed. 

                        Please find the test report below:
                        ${currentBuild.description}

                        Docker Compose Test YML:
                        ${env.DOCKER_COMPOSE_TEST_YML}
                    """,
                    attachLog: true
                )
            }
        }
    }
}
